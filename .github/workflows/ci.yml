name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  ci:
    name: CI
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy
      
      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-registry-
      
      - name: Cache cargo build
        uses: actions/cache@v4
        with:
          path: target
          key: ${{ runner.os }}-cargo-build-release-${{ hashFiles('**/Cargo.lock') }}-${{ hashFiles('src/**/*.rs', 'Cargo.toml') }}
          restore-keys: |
            ${{ runner.os }}-cargo-build-release-${{ hashFiles('**/Cargo.lock') }}-
            ${{ runner.os }}-cargo-build-release-
      
      # Run all checks
      - name: Check formatting
        run: cargo fmt --all -- --check
      
      - name: Run clippy
        run: cargo clippy --workspace --all-targets -- -D warnings
      
      - name: Run tests
        run: cargo test --workspace
      
      - name: Check documentation
        run: cargo doc --workspace --no-deps --document-private-items
        env:
          RUSTDOCFLAGS: "-D warnings"
      
      # Build release binary
      - name: Build release
        run: cargo build --release --workspace
      
      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: event-modeler-linux-x86_64
          path: target/release/event_modeler
          retention-days: 1
      
      # Generate and post diagram preview for PRs
      - name: Generate and comment diagram preview
        if: github.event_name == 'pull_request'
        run: |
          # Generate SVG
          if ./target/release/event_modeler tests/fixtures/acceptance/example.eventmodel -o example.svg; then
            # Create base64 data URI for the SVG
            SVG_BASE64=$(base64 -w 0 example.svg)
            SVG_DATA_URI="data:image/svg+xml;base64,${SVG_BASE64}"
            
            # Create comment with embedded SVG
            cat > comment.md << EOF
          ## ðŸ“Š Event Model Diagram Preview
          
          Generated from \`tests/fixtures/acceptance/example.eventmodel\`:
          
          <img src="${SVG_DATA_URI}" alt="Event Model Diagram" style="max-width: 100%; height: auto;">
          
          <details>
          <summary>ðŸ“„ SVG Source Code</summary>
          
          \`\`\`svg
          $(cat example.svg)
          \`\`\`
          
          </details>
          
          > **Tip:** Right-click the diagram and "Open Image in New Tab" for full size view
          
          ---
          ðŸ¤– *Generated by CI build #${{ github.run_number }}*
          EOF
            
            # Post comment
            gh pr comment ${{ github.event.pull_request.number }} --body-file comment.md --edit-last || gh pr comment ${{ github.event.pull_request.number }} --body-file comment.md
          else
            echo "Failed to generate diagram"
          fi
        env:
          GH_TOKEN: ${{ github.token }}