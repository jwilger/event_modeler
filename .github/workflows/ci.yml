name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  ci:
    name: CI
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy
      
      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-registry-
      
      - name: Cache cargo build
        uses: actions/cache@v4
        with:
          path: target
          key: ${{ runner.os }}-cargo-build-release-${{ hashFiles('**/Cargo.lock') }}-${{ hashFiles('src/**/*.rs', 'Cargo.toml') }}
          restore-keys: |
            ${{ runner.os }}-cargo-build-release-${{ hashFiles('**/Cargo.lock') }}-
            ${{ runner.os }}-cargo-build-release-
      
      # Run all checks
      - name: Check formatting
        run: cargo fmt --all -- --check
      
      - name: Run clippy
        run: cargo clippy --workspace --all-targets -- -D warnings
      
      - name: Run tests
        run: cargo test --workspace
      
      - name: Check documentation
        run: cargo doc --workspace --no-deps --document-private-items
        env:
          RUSTDOCFLAGS: "-D warnings"
      
      # Build release binary
      - name: Build release
        run: cargo build --release --workspace
      
      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: event-modeler-linux-x86_64
          path: target/release/event_modeler
          retention-days: 1
      
      # Generate and update PR description with diagram
      - name: Update PR description with diagram
        if: github.event_name == 'pull_request'
        run: |
          # Generate SVG
          if ./target/release/event_modeler tests/fixtures/acceptance/example.eventmodel -o example.svg; then
            # Get current PR description
            export GH_TOKEN="${{ github.token }}"
            CURRENT_BODY=$(gh pr view ${{ github.event.pull_request.number }} --json body -q '.body')
            
            # Check if GIST_TOKEN is available
            if [ -n "${{ secrets.GIST_TOKEN }}" ]; then
              echo "Using GIST_TOKEN to create gist"
              export GH_TOKEN="${{ secrets.GIST_TOKEN }}"
              
              # Create a gist with the SVG using PAT
              GIST_OUTPUT=$(gh gist create example.svg --desc "Event Model Diagram for PR #${{ github.event.pull_request.number }}" --public)
              GIST_ID=$(echo "$GIST_OUTPUT" | grep -oE '[a-f0-9]{32}' | head -1)
              
              # Get the raw URL for the SVG file
              SVG_URL="https://gist.githubusercontent.com/${{ github.actor }}/${GIST_ID}/raw/example.svg"
              
              # Create the diagram section with gist
              cat > diagram_section.md << 'DELIMITER'
<!-- DIAGRAM_START -->
## üìä Event Model Diagram Preview

Generated from `tests/fixtures/acceptance/example.eventmodel`:

DELIMITER
              echo "![Event Model Diagram](${SVG_URL})" >> diagram_section.md
              cat >> diagram_section.md << 'DELIMITER'

> **View options:**
DELIMITER
              echo "> - Click image to view full size" >> diagram_section.md
              echo "> - [Open in new tab](${SVG_URL})" >> diagram_section.md
              echo "> - [View gist](https://gist.github.com/${GIST_ID})" >> diagram_section.md
              cat >> diagram_section.md << DELIMITER

### Current Progress: Step 2 - Swimlanes
‚úÖ Workflow title
‚úÖ Horizontal swimlanes with labels

---
ü§ñ *Generated by CI build #${{ github.run_number }}*
<!-- DIAGRAM_END -->
DELIMITER
              DIAGRAM_SECTION=$(cat diagram_section.md)
            else
              echo "No GIST_TOKEN available, using fallback"
              # Fallback: show message about missing token
              cat > diagram_section.md << DELIMITER
<!-- DIAGRAM_START -->
## üìä Event Model Diagram Preview

‚ö†Ô∏è **Note:** To see the diagram inline, please set up a \`GIST_TOKEN\` secret with \`gist\` scope.

Generated from \`tests/fixtures/acceptance/example.eventmodel\`

### Current Progress: Step 2 - Swimlanes
‚úÖ Workflow title  
‚úÖ Horizontal swimlanes with labels

---
ü§ñ *Generated by CI build #${{ github.run_number }}*
<!-- DIAGRAM_END -->
DELIMITER
              DIAGRAM_SECTION=$(cat diagram_section.md)
            fi
            
            # Update PR body - remove old diagram section if exists and append new one
            if echo "$CURRENT_BODY" | grep -q "<!-- DIAGRAM_START -->"; then
              # Remove existing diagram section
              NEW_BODY=$(echo "$CURRENT_BODY" | sed '/<!-- DIAGRAM_START -->/,/<!-- DIAGRAM_END -->/d')
              NEW_BODY="${NEW_BODY}

${DIAGRAM_SECTION}"
            else
              # Just append the diagram section
              NEW_BODY="${CURRENT_BODY}

${DIAGRAM_SECTION}"
            fi
            
            # Update PR description
            export GH_TOKEN="${{ github.token }}"
            echo "$NEW_BODY" > pr_body.md
            gh pr edit ${{ github.event.pull_request.number }} --body-file pr_body.md
          else
            echo "Failed to generate diagram"
          fi