name: Release

on:
  release:
    types: [created]

env:
  CARGO_TERM_COLOR: always

permissions:
  contents: write
  pages: write
  id-token: write

jobs:
  validate-release:
    name: Validate Release
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.release.tag_name }}
      
      - name: Get commit SHA for tag
        id: get_sha
        run: |
          COMMIT_SHA=$(git rev-parse HEAD)
          echo "commit_sha=$COMMIT_SHA" >> $GITHUB_OUTPUT
          echo "Validating release for commit: $COMMIT_SHA"
      
      - name: Check CI status for commit
        id: check_ci
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          COMMIT_SHA="${{ steps.get_sha.outputs.commit_sha }}"
          echo "Checking CI status for commit $COMMIT_SHA"
          
          # Wait up to 10 minutes for CI to complete
          MAX_ATTEMPTS=40
          ATTEMPT=0
          
          while [ $ATTEMPT -lt $MAX_ATTEMPTS ]; do
            # Get all check runs for this commit
            CHECK_RUNS=$(gh api "/repos/${{ github.repository }}/commits/$COMMIT_SHA/check-runs" --jq '.check_runs')
            
            # Check if CI workflow exists and its status
            CI_STATUS=$(echo "$CHECK_RUNS" | jq -r '.[] | select(.name == "Build") | .status')
            CI_CONCLUSION=$(echo "$CHECK_RUNS" | jq -r '.[] | select(.name == "Build") | .conclusion')
            
            if [ -z "$CI_STATUS" ]; then
              echo "CI workflow not found for this commit. Waiting..."
              sleep 15
              ATTEMPT=$((ATTEMPT + 1))
              continue
            fi
            
            if [ "$CI_STATUS" = "completed" ]; then
              if [ "$CI_CONCLUSION" = "success" ]; then
                echo "CI passed for commit $COMMIT_SHA"
                exit 0
              else
                echo "CI failed for commit $COMMIT_SHA with conclusion: $CI_CONCLUSION"
                exit 1
              fi
            else
              echo "CI is still running (status: $CI_STATUS). Waiting..."
              sleep 15
              ATTEMPT=$((ATTEMPT + 1))
            fi
          done
          
          echo "Timeout waiting for CI to complete"
          exit 1
      
      - name: Extract version from Cargo.toml
        id: cargo_version
        run: |
          VERSION=$(grep '^version = ' Cargo.toml | head -1 | cut -d'"' -f2)
          echo "version=$VERSION" >> $GITHUB_OUTPUT
      
      - name: Validate version match
        run: |
          TAG_VERSION="${{ github.event.release.tag_name }}"
          TAG_VERSION="${TAG_VERSION#v}"  # Remove 'v' prefix if present
          CARGO_VERSION="${{ steps.cargo_version.outputs.version }}"
          
          # Extract major.minor.patch from both versions
          TAG_BASE="${TAG_VERSION%%-*}"  # Remove everything after first hyphen
          CARGO_BASE="${CARGO_VERSION%%-*}"  # Remove everything after first hyphen
          
          if [ "$TAG_BASE" != "$CARGO_BASE" ]; then
            echo "Error: Tag version base ($TAG_BASE) does not match Cargo.toml version base ($CARGO_BASE)"
            exit 1
          fi
      
      - name: Check and update prerelease status
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          TAG_VERSION="${{ github.event.release.tag_name }}"
          TAG_VERSION="${TAG_VERSION#v}"  # Remove 'v' prefix if present
          
          # Check if version has a suffix (prerelease)
          if [[ "$TAG_VERSION" == *"-"* ]]; then
            # Version has suffix, should be prerelease
            if [ "${{ github.event.release.prerelease }}" != "true" ]; then
              echo "Version has suffix, marking as prerelease"
              gh release edit "${{ github.event.release.tag_name }}" --prerelease
            fi
          fi
      
      - name: Delete release on validation failure
        if: failure()
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          echo "Validation failed, deleting release and tag"
          gh release delete "${{ github.event.release.tag_name }}" --yes
          git push origin :refs/tags/${{ github.event.release.tag_name }}

  build-release:
    name: Build Release
    needs: validate-release
    strategy:
      matrix:
        include:
          # Linux
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            binary: event_modeler
            name: event-modeler-linux-x86_64
            use-cross: false
          
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            binary: event_modeler
            name: event-modeler-linux-x86_64-musl
            use-cross: true
          
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            binary: event_modeler
            name: event-modeler-linux-aarch64
            use-cross: true
          
          # macOS
          - os: macos-latest
            target: x86_64-apple-darwin
            binary: event_modeler
            name: event-modeler-macos-x86_64
            use-cross: false
          
          - os: macos-latest
            target: aarch64-apple-darwin
            binary: event_modeler
            name: event-modeler-macos-aarch64
            use-cross: false
          
          # Windows
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            binary: event_modeler.exe
            name: event-modeler-windows-x86_64
            use-cross: false
    
    runs-on: ${{ matrix.os }}
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
      
      - name: Install cross
        if: matrix.use-cross == true
        run: cargo install cross --git https://github.com/cross-rs/cross
      
      - name: Build
        run: |
          if [ "${{ matrix.use-cross }}" = "true" ]; then
            cross build --release --target ${{ matrix.target }}
          else
            cargo build --release --target ${{ matrix.target }}
          fi
        shell: bash
      
      - name: Package
        run: |
          pushd target/${{ matrix.target }}/release
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            7z a ../../../${{ matrix.name }}.zip ${{ matrix.binary }}
          else
            tar czf ../../../${{ matrix.name }}.tar.gz ${{ matrix.binary }}
          fi
          popd
        shell: bash
      
      - name: Upload Release Asset (tar.gz)
        if: matrix.os != 'windows-latest'
        env:
          GH_TOKEN: ${{ github.token }}
        run: gh release upload "${{ github.event.release.tag_name }}" "${{ matrix.name }}.tar.gz" --clobber
        shell: bash
      
      - name: Upload Release Asset (zip)
        if: matrix.os == 'windows-latest'
        env:
          GH_TOKEN: ${{ github.token }}
        run: gh release upload "${{ github.event.release.tag_name }}" "${{ matrix.name }}.zip" --clobber
        shell: bash

  publish-docs:
    name: Publish Documentation
    needs: build-release
    runs-on: ubuntu-latest
    if: github.event.release.prerelease == false
    
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.release.tag_name }}
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Create docs directory structure
        run: |
          mkdir -p docs/
          mkdir -p docs/api/
      
      - name: Generate landing page
        run: |
          # Copy template and replace version placeholders
          cp .github/templates/landing-page.html docs/index.html
          sed -i "s/__VERSION__/${{ github.event.release.tag_name }}/g" docs/index.html
      - name: Build Rust documentation
        run: |
          cargo doc --no-deps --workspace
          cp -r target/doc/* docs/api/
      
      - name: Build ADR documentation with log4brains
        run: |
          # Build log4brains static site with custom base path
          npx log4brains build --basePath /event_modeler/adr
          
          # Copy the generated ADR site to docs/adr
          cp -r .log4brains/out/* docs/adr/
      
      - name: Setup Pages
        uses: actions/configure-pages@v4
      
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./docs
      
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4